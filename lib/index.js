// Generated by CoffeeScript 1.7.1
(function() {
  var fs, path, start, _;

  fs = require('fs');

  path = require('path');

  _ = require('lodash');

  start = function(opts, callback) {
    var ctx, loadHistory, repl, replHistory, saveHistory, _ref, _ref1, _ref2;
    _ref = _.isFunction(opts) ? [{}, opts] : [opts, callback], opts = _ref[0], callback = _ref[1];
    replHistory = (_ref1 = opts.historyFile) != null ? _ref1 : "./.repl-history";
    repl = require("repl").start((_ref2 = opts.prompt) != null ? _ref2 : ">> ");
    ctx = null;
    saveHistory = function(callback) {
      return fs.writeFile(replHistory, repl.rli.history.reverse().join('\n') + '\n', callback);
    };
    loadHistory = function(callback) {
      var data, ex, line, lines, _i, _len;
      if (fs.existsSync(replHistory)) {
        try {
          data = fs.readFileSync(replHistory, 'utf8');
          lines = data.split('\n');
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            line = lines[_i];
            if (line) {
              repl.rli.line = line;
              repl.rli._addHistory();
              repl.rli.line = '';
              repl.lines.push(line);
            }
          }
        } catch (_error) {
          ex = _error;
          return callback(ex);
        }
      }
      return callback(null);
    };
    repl.on('exit', function() {
      return saveHistory(function(err) {
        if (err) {
          console.error("error writing console history: " + err);
        }
        return process.kill(process.pid, 'SIGINT');
      });
    });
    ctx = repl.context;
    ctx.repl = repl;
    ctx.lo = require('lodash');
    ctx.cb = function() {
      var i, l, message;
      l = arguments.length;
      message = "Callback called with " + l + " argument" + (l === 1 ? "" : "s") + (l > 0 ? ":\n" : "");
      i = 0;
      while (i < 10) {
        if (i < arguments.length) {
          ctx["_" + i] = arguments[i];
          message += "_" + i + " = " + arguments[i] + "\n";
        } else {
          if (ctx.hasOwnProperty("_" + i)) {
            delete ctx["_" + i];
          }
        }
        i += 1;
      }
      return console.log(message);
    };
    repl.defineCommand('quit', {
      help: 'Exit the repl',
      action: function() {
        return repl.rli.close();
      }
    });
    repl.defineCommand('clearHist', {
      help: 'repl history cleared',
      action: function() {
        repl.lines = [];
        repl.rli.history = repl.rli.history.slice(0, 1);
        repl.rli.historyIndex = -1;
        return console.log('console history cleared');
      }
    });
    loadHistory(function(err) {
      return callback(err, ctx);
    });
    return repl;
  };

  module.exports = {
    start: start
  };

}).call(this);
